###
### Variables
###

# Global variables (will be set in every job):
variables:
  WARN_AS_ERROR: "1"
  # MAKEFLAGS: "-s"
  REALM_BACKTRACE: "1"
  REALM_SYNTHETIC_CORE_MAP: "" # Disable Realm thread pinning.
  TIMELIMIT: "600"  # each test should take less than 10 minutes
  USE_DEFCHECK: "1"

# Local variables (included on a case-by-case basis in each job):
.gcc48: &gcc48
  CXX: "g++-4.8"
  F90: "gfortran-4.8"
.gcc49: &gcc49
  CXX: "g++-4.9"
  F90: "gfortran-4.9"
.gcc5: &gcc5
  CXX: "g++-5"
  F90: "gfortran-5"
.gcc6: &gcc6
  CXX: "g++-6"
  F90: "gfortran-6"
.gcc7: &gcc7
  CXX: "g++-7"
  F90: "gfortran-7"
.gcc8: &gcc8
  CXX: "g++-8"
  F90: "gfortran-8"

.clang35: &clang35
  CXX: "clang++-3.5"
  F90: "gfortran-5"
.clang38: &clang38
  CXX: "clang++-3.8"
  F90: "gfortran-5"
.clang7: &clang7
  CXX: "clang++-7"
  F90: "gfortran-5"
.clang8: &clang8
  CXX: "clang++-8"
  F90: "gfortran-5"

.terra35: &terra35
  LLVM_CONFIG: "llvm-config-3.5"
  TERRA_DIR: "/usr/local/terra35"
.terra38: &terra38
  LLVM_CONFIG: "llvm-config-3.8"
  TERRA_DIR: "/usr/local/terra38"
.terra70: &terra70
  LLVM_CONFIG: "llvm-config-7"
  TERRA_DIR: "/usr/local/terra70"

.debug: &debug
  DEBUG: "1"
.release: &release
  DEBUG: "0"

.maxdim5: &maxdim5
  MAX_DIM: "5"      # test up to 5-D (useful because 1-4 have special cases)

.spy: &spy
  USE_SPY: "1"

.checks: &checks
  BOUNDS_CHECKS: "1"
  PRIVILEGE_CHECKS: "1"

.cxx98_normal: &cxx98_normal
  CC_FLAGS: "-std=c++98"
.cxx11_normal: &cxx11_normal
  CC_FLAGS: "-std=c++11"
.cxx11_hardened: &cxx11_hardened
  CC_FLAGS: "-std=c++11 -D_FORTIFY_SOURCE=2 -D_GLIBCXX_ASSERTIONS"
.cxx14_normal: &cxx14_normal
  CC_FLAGS: "-std=c++14"
.cxx17_normal: &cxx17_normal
  CC_FLAGS: "-std=c++17"
.cxx98_32bit_normal: &cxx98_32bit_normal
  CC_FLAGS: "-std=c++98 -m32"
  LD_FLAGS: "-m32"
  MARCH: "i686"
.cxx11_32bit_normal: &cxx11_32bit_normal
  CC_FLAGS: "-std=c++11 -m32"
  LD_FLAGS: "-m32 -latomic"
  MARCH: "i686"

.openmp: &openmp
  USE_OPENMP: "1"
.python2: &python2
  USE_PYTHON: "1"
.python3: &python3
  USE_PYTHON: "1"
  # FIXME: It would be nice to find a better way to do this,
  # but the alternatives look scary
  PYTHON_EXE: "python3"
  PYTHON_LIB: "/usr/lib/x86_64-linux-gnu/libpython3.5m.so"
  PYTHON_VERSION_MAJOR: "3"
  TEST_PYTHON_EXE: "python3"
.hdf5: &hdf5
  USE_HDF: "1"
  HDF_HEADER: "hdf5/serial/hdf5.h"
  HDF_LIBNAME: "hdf5_serial"
.fortran: &fortran
  LEGION_USE_FORTRAN: "1"
.llvm: &llvm
  USE_LLVM: "1"
.cuda: &cuda
  USE_CUDA: "1"
.gasnet: &gasnet
  REALM_NETWORKS: "gasnet1"
.gasnetdbg: &gasnetdbg
  REALM_NETWORKS: "gasnet1"
  GASNET_DEBUG: "1"
  # GASNet headers are not guaranteed to be warning-free in debug mode
  WARN_AS_ERROR: "0"
.gasnetex: &gasnetex
  REALM_NETWORKS: "gasnet1"
  GASNET_VERSION: "GASNet-EX-snapshot"
  # source URL is set by a GitLab CI variable as the GASNet-EX team prefers
  #  it not to be public at this time
  #GASNETEX_SNAPSHOT_SOURCE_URL: ...
.mpi: &mpi
  REALM_NETWORKS: "mpi"
  # mpich-3.2
  MPIR_CVAR_CH3_NOLOCAL: "1"
  # mpich-3.3 & above
  MPIR_CVAR_NOLOCAL: "1"
.cmake: &cmake
  USE_CMAKE: "1"
.kokkos: &kokkos
  USE_KOKKOS: "1"
  KOKKOS_REPO: "https://github.com/kokkos/kokkos.git"
  KOKKOS_BRANCH: "develop"
.kokkos_fork: &kokkos_fork
  USE_KOKKOS: "1"
  KOKKOS_REPO: "https://github.com/streichler/kokkos.git"
  KOKKOS_BRANCH: "legion_interop"

.prof: &prof
  USE_PROF: "1"

.legion: &legion
  TEST_REGENT: "0"
  LEGION_WARNINGS_FATAL: "1"

.ctest: &ctest
  TEST_CTEST: "1"

.regent: &regent
  TEST_LEGION_CXX: "0"
  TEST_REALM: "0"
  TEST_FUZZER: "0"
.parallel: &parallel
  REGENT_JOBS: "2"
.incremental: &incremental
  REGENT_INCREMENTAL: "1"

.darwin_power9_scheduler: &darwin_power9_scheduler
  CI_DEBUG_TRACE: "false"
  SCHEDULER_PARAMETERS: "--nodes=1 --partition=power9"
  FLEGION_USER: "gitlab-runner-flegion"
  DARWIN_JOB_TYPE: "power9"

###
### Setup
###

# These commands will run before each job.
before_script:
  - set -e
  - uname -a
  - |
    if [[ "$(uname)" = "Linux" ]]; then
      export THREADS=$(nproc --all)
    elif [[ "$(uname)" = "Darwin" ]]; then
      export THREADS=$(sysctl -n hw.ncpu)
    else
      echo "Unknown platform. Setting THREADS to 1."
      export THREADS=1
    fi
  # - |
  #   if [[ "$(uname)" = "Darwin" ]]; then
  #     brew update
  #     brew install pypy homebrew/versions/llvm35
  #   fi
  - |
    if [[ "$REALM_NETWORKS" != "" && "$(hostname)" != n0003 ]]; then
      # OpenMPI:
      # export LAUNCHER="mpirun -n 2 -x TERRA_PATH -x INCLUDE_PATH -x LD_LIBRARY_PATH -x LG_RT_DIR -x USE_RDIR"
      # MPICH:
      export LAUNCHER="mpirun -n 2"
      export MPICH_CXX=${CXX}
      if [[ "$REALM_NETWORKS" = "gasnet1" ]]; then
        export CONDUIT=mpi
        if [[ "$GASNET_DEBUG" -eq 1 ]]; then
          export GASNET_ROOT="$PWD/gasnet/debug"
        else
          export GASNET_ROOT="$PWD/gasnet/release"
        fi
        git clone https://github.com/StanfordLegion/gasnet.git gasnet
        make -C gasnet -j$THREADS
      fi
    fi
  - |
    if [[ "$(hostname)" = n0003 ]]; then
      source /usr/local/modules-3.2.10/init/bash
      module load cmake/3.8.2
      module load mpi/openmpi/1.10.4
      module load cuda/8.0
      export OMPI_CXX=${CXX}

      if [[ "$REALM_NETWORKS" = "gasnet1" ]]; then
        module load gasnet/1.30.0-openmpi
      fi
      if [[ "$REALM_NETWORKS" != "" ]]; then
        export LAUNCHER="mpirun -n 2 -x TERRA_PATH -x INCLUDE_PATH -x LD_LIBRARY_PATH -x LG_RT_DIR -x USE_RDIR"
      fi
    fi
  - |
    if [[ "$DARWIN_JOB_TYPE" = power9 ]]; then
      if [[ "$CXX" = "g++-6" ]]; then
        module load openmpi/p9/3.1.4-gcc_6.5.0
      elif [[ "$CXX" = "g++-7" ]]; then
        module load openmpi/p9/3.1.4-gcc_7.4.0
      elif [[ "$CXX" = "g++-8" ]]; then
        module load openmpi/p9/3.1.4-gcc_8.3.0
      elif [[ "$CXX" = "clang++-8" ]]; then
        module load clang/8.0.0
        export CXX=clang++
        export CC_FLAGS="$CC_FLAGS --gcc-toolchain=/projects/opt/ppc64le/gcc/8.3.0"
        export LD_FLAGS="$LD_FLAGS --gcc-toolchain=/projects/opt/ppc64le/gcc/8.3.0"
      else
        echo "Failed to detect Darwin compiler version"
        false
      fi
      module load cmake/3.12.4
      export OMPI_CXX=${CXX}

      if [[ "$REALM_NETWORKS" != "" ]]; then
        export LAUNCHER="mpirun -n 2 -x TERRA_PATH -x INCLUDE_PATH -x LD_LIBRARY_PATH -x LG_RT_DIR -x USE_RDIR"
      fi
    fi
  - |
    if [[ "$USE_KOKKOS" -eq 1 ]]; then
      git clone -b $KOKKOS_BRANCH -- $KOKKOS_REPO kokkos
      git -C kokkos log -n 1
      mkdir kokkos/build
      cd kokkos/build
      KOKKOS_CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=../install -DKokkos_CXX_STANDARD=11"
      # the following line is a workaround for Kokkos issue #2652
      KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DCMAKE_CXX_FLAGS=-DKOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK"
      if [[ "$USE_OPENMP" -eq 1 ]]; then
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ENABLE_OPENMP=ON"
      else
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ENABLE_SERIAL=ON"
      fi
      if [[ "$USE_CUDA" -eq 1 ]]; then
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ENABLE_CUDA=ON -DKokkos_ENABLE_CUDA_LAMBDA=ON -DKokkos_ENABLE_CUDA_UVM=OFF"
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ARCH_${KOKKOS_CUDA_ARCH}=ON"
        #KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_CUDA_DIR=${CUDA}"
        export CUDA_PATH="${CUDA}/lib64"
        #export CUDA_PATH="${CUDA}/lib64:${CUDA}/lib64/stubs"
        #export CUDA_TOOLKIT_ROOT_DIR=$CUDA
        #export CUDA_PATH="${CUDA}/bin"

        if [[ "$CXX" == *clang* ]]; then
          # clang speaks cuda, so can be used as Kokkos' "C++" compiler
          export KOKKOS_CXX_COMPILER="$CXX"
        else
          # if not using clang, we need CXX to be Kokkos' nvcc_wrapper...
          NVCC_WRAPPER=`pwd`/../bin/nvcc_wrapper
          KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DCMAKE_CXX_COMPILER=${NVCC_WRAPPER}"
          export KOKKOS_CXX_COMPILER="${NVCC_WRAPPER}"
          # which uses nvcc from the path, so make sure the right cuda is first
          PATH=${CUDA}/bin:$PATH
        fi
      else
        export KOKKOS_CXX_COMPILER="$CXX"
      fi
      echo cmake $KOKKOS_CMAKE_OPTS ..
      cmake $KOKKOS_CMAKE_OPTS ..
      make -j$THREADS install
      cd ../..
      # tell cmake where to find the Kokkos install
      export Kokkos_DIR=`pwd`/kokkos/install
    fi

###
### Tags
###

.linux: &linux
  tags:
    - linux
.macos: &macos
  tags:
    - macos
.darwin_power9: &darwin_power9
  tags:
    - darwin-slurm
    - power9
  only:
    variables:
      - $RUN_DARWIN_JOBS

# For compute-heavy tests:
.linux_compute: &linux_compute
  tags:
    - linux
    - compute

# For performance tests, always use specific machines:
.linux_n0004: &linux_n0004
  tags:
    - linux
    - n0004

# For CUDA tests, always use a specific machine:
.n0003: &n0003
  tags:
    - n0003
  only:
    variables:
      - $RUN_N0003_JOBS

.p100: &p100
  tags:
    - p100
  only:
    variables:
      - $RUN_P100_JOBS
.cuda_p100: &cuda_p100
  CUDA: "/usr/local/cuda"
  USE_CUDA: "1"
  GPU_ARCH: "60"
  # cmake needs to know where to find libcuda.so
  CUDA_LIB_PATH: "/usr/local/nvidia/lib64"
  KOKKOS_CUDA_ARCH: "PASCAL60"
  # docker puts both 32 and 64 bit libcuda.so's in LD_LIBRARY_PATH, but that confuses Kokkos's cmake
  LD_LIBRARY_PATH: "/usr/local/nvidia/lib64"

###
### Docker Image
###

# Each job will run in a fresh container with this image.
.image: &image
  image: stanfordlegion/gitlab-ci:ubuntu16.04 # i.e. https://hub.docker.com/r/stanfordlegion/gitlab-ci/
.image_clang: &image_clang
  image: stanfordlegion/gitlab-ci:ubuntu16.04-clang # i.e. https://hub.docker.com/r/stanfordlegion/gitlab-ci/

###
### Tests
###

# Each job will run this set of tests.
.tests: &tests
  script:
    - ./tools/add_github_host_key.sh
    - grep 'model name' /proc/cpuinfo | uniq -c || true
    - which $CXX
    - $CXX --version
    - |
      if [[ "$USE_DEFCHECK" -eq 1 ]]; then
        export DEFCHECK_CXX="${CXX}"
        export CXX=`pwd`/tools/cxx_defcheck
        # if we're using MPI, make sure mpicxx uses the right compiler too
        export OMPI_CXX=`pwd`/tools/cxx_defcheck
        export MPICH_CXX=`pwd`/tools/cxx_defcheck
      fi
    - free
    - $TEST_PYTHON_EXE ./test.py
  retry:
    max: 0
    when:
      - runner_system_failure
      - unknown_failure

# Some additional tests are only run on certain configurations.
.external_tests: &external_tests
  script:
    - ./tools/add_github_host_key.sh
    - |
      if [[ -n $GITLAB_DEPLOY_KEY ]]; then
        eval $(ssh-agent -s)
        ssh-add <(echo "$GITLAB_DEPLOY_KEY")
      fi
    - unset USE_DEFCHECK
    - $TEST_PYTHON_EXE ./test.py --test=external --test=private
  retry:
    max: 0
    when:
      - runner_system_failure
      - unknown_failure

# For performance tests, run these commands:
.perf_tests: &perf_tests
  script:
    - ./tools/add_github_host_key.sh
    - |
      if [[ -n $GITLAB_DEPLOY_KEY ]]; then
        eval $(ssh-agent -s)
        ssh-add <(echo "$GITLAB_DEPLOY_KEY")
      fi
    - git config --global user.name "Legion Testing Automation"
    - git config --global user.email "legion-testing@googlegroups.com"
    - export PERF_MIN_NODES=1
    - export PERF_MAX_NODES=1
    - $TEST_PYTHON_EXE ./test.py --test=perf
  retry:
    max: 0
    when:
      - runner_system_failure
      - unknown_failure

###
### Jobs
###

# Each item below defines a job.

# There are two tiers of tests.
#  1. Full test suite (small number of compilers).
#  2. Minimal test suite (other compilers).

# Run the full test suite on GCC 4.9 and Clang 3.5.

# Linux with GCC 4.9
# * Basic configurations
#   * Release
gcc49_cxx98_release_legion_fortran:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx98_normal, *legion, *fortran]
gcc49_cxx98_release_llvm_cmake_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx98_normal, *llvm, *cmake, *regent, *incremental]
#   * Debug (Privilege and Bounds Checks)
gcc49_cxx98_debug_checks_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *checks, *legion]
#   * Spy
gcc49_cxx98_debug_spy_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *spy, *legion]
gcc49_cxx98_debug_spy_python3_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *spy, *python3, *regent, *parallel]
#   * Prof
gcc49_cxx98_release_prof_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx98_normal, *prof, *regent, *parallel]
#   * C++11
gcc49_cxx11_release_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *legion]
#   * higher dimension support (5-D), with both c++98 and c++11
gcc49_cxx98_release_maxdim5_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx98_normal, *maxdim5, *regent, *parallel]
clang38_cxx11_release_maxdim5_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx11_normal, *maxdim5, *regent, *parallel]
# * Features: one test per feature
#   * OpenMP
gcc49_cxx98_debug_openmp_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *openmp, *legion]
gcc49_cxx98_debug_openmp_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *openmp, *regent]
#   * Python
gcc49_cxx98_debug_python2_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *python2, *legion]
gcc49_cxx98_debug_python3_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *python3, *legion]
#   * LLVM
gcc49_cxx98_debug_llvm_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *llvm, *cmake, *legion, *ctest]
gcc49_cxx98_debug_llvm_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *llvm, *regent]
#   * HDF5
gcc49_cxx98_debug_hdf5_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *hdf5, *cmake, *legion, *ctest]
gcc49_cxx98_debug_hdf5_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *hdf5, *regent]
#   * GASNet
gcc49_cxx98_release_gasnet_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx98_normal, *gasnet, *legion]
gcc49_cxx98_debug_gasnet_cmake_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *gasnet, *cmake, *legion, *ctest]
gcc49_cxx98_debug_gasnet_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *gasnet, *regent, *incremental]
gcc49_cxx98_debug_gasnetdbg_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *gasnetdbg, *regent, *incremental]
gcc49_cxx98_debug_gasnetex_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *gasnetex, *regent, *incremental]
#   * MPI
gcc49_cxx98_release_mpi_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx98_normal, *mpi, *legion]
gcc49_cxx98_debug_mpi_cmake_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *mpi, *cmake, *legion, *ctest]
gcc49_cxx98_debug_mpi_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *mpi, *regent, *incremental]
# * Integration: Python + Regent
gcc49_cxx98_debug_python2_regent:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *python2, *regent]
gcc49_cxx98_debug_python3_regent:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *python3, *regent]
# * Integration: LLVM + GASNet
gcc49_cxx98_debug_llvm_gasnet_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *llvm, *gasnet, *legion]
gcc49_cxx98_debug_llvm_gasnet_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *llvm, *gasnet, *regent, *incremental]
# * Integration: LLVM + MPI
gcc49_cxx98_debug_llvm_mpi_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *llvm, *mpi, *legion]
gcc49_cxx98_debug_llvm_mpi_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *llvm, *mpi, *regent, *incremental]
# * Integration: HDF5 + GASNet
gcc49_cxx98_debug_hdf5_gasnet_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *hdf5, *gasnet, *legion]
gcc49_cxx98_debug_hdf5_gasnet_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *hdf5, *gasnet, *regent]
# * Integration: HDF5 + MPI
gcc49_cxx98_debug_hdf5_mpi_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *hdf5, *mpi, *legion]
gcc49_cxx98_debug_hdf5_mpi_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_normal, *hdf5, *mpi, *regent]
# Multi-node Legion Spy
gcc49_cxx98_debug_spy_gasnet_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *cxx98_normal, *spy, *gasnet, *regent]
gcc49_cxx98_debug_spy_mpi_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *cxx98_normal, *spy, *mpi, *regent]
# * Different architectures
gcc49_cxx98_32bit_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx98_32bit_normal, *legion]
gcc49_cxx98_32bit_release_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx98_32bit_normal, *legion]
# * External tests
gcc49_cxx11_debug_external:
  <<: [*linux_compute, *image, *external_tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *openmp, *hdf5]

# Linux with Clang 3.8
# * Basic configurations
#   * Release
clang38_cxx98_release_legion_fortran:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx98_normal, *legion, *fortran]
clang38_cxx98_release_llvm_cmake_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx98_normal, *llvm, *cmake, *regent, *incremental]
#   * Debug (Privilege and Bounds Checks)
clang38_cxx98_debug_checks_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *checks, *legion]
#   * Spy
clang38_cxx98_debug_spy_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *spy, *legion]
clang38_cxx98_debug_spy_python3_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *spy, *python3, *regent, *parallel]
#   * Prof
clang38_cxx98_release_prof_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx98_normal, *prof, *regent, *parallel]
#   * C++11
clang38_cxx11_release_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx11_normal, *legion]
# * Features: one test per feature
#   * OpenMP
clang38_cxx98_debug_openmp_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *openmp, *legion]
clang38_cxx98_debug_openmp_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *openmp, *regent]
#   * Python
clang38_cxx98_debug_python2_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *python2, *legion]
clang38_cxx98_debug_python3_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *python3, *legion]
#   * LLVM
clang38_cxx98_debug_llvm_cmake_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *llvm, *cmake, *legion, *ctest]
clang38_cxx98_debug_llvm_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *llvm, *regent]
#   * HDF5
clang38_cxx98_debug_hdf5_cmake_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *hdf5, *cmake, *legion, *ctest]
clang38_cxx98_debug_hdf5_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *hdf5, *regent]
#   * GASNet
clang38_cxx98_debug_gasnet_cmake_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *gasnet, *cmake, *legion, *ctest]
clang38_cxx98_debug_gasnet_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *gasnet, *regent, *incremental]
#   * MPI
clang38_cxx98_debug_mpi_cmake_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *mpi, *cmake, *legion, *ctest]
clang38_cxx98_debug_mpi_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *mpi, *regent, *incremental]
# * Integration: Python + Regent
clang38_cxx98_debug_python2_regent:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *python2, *regent]
clang38_cxx98_debug_python3_regent:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *python3, *regent]
# * Integration: LLVM + GASNet
clang38_cxx98_debug_llvm_gasnet_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *llvm, *gasnet, *legion]
clang38_cxx98_debug_llvm_gasnet_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *llvm, *gasnet, *regent, *incremental]
# * Integration: LLVM + MPI
clang38_cxx98_debug_llvm_mpi_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *llvm, *mpi, *legion]
clang38_cxx98_debug_llvm_mpi_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *llvm, *mpi, *regent, *incremental]
# * Integration: HDF5 + GASNet
clang38_cxx98_debug_hdf5_gasnet_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *hdf5, *gasnet, *legion]
clang38_cxx98_debug_hdf5_gasnet_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *hdf5, *gasnet, *regent, *incremental]
# * Integration: HDF5 + MPI
clang38_cxx98_debug_hdf5_mpi_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *hdf5, *mpi, *legion]
clang38_cxx98_debug_hdf5_mpi_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_normal, *hdf5, *mpi, *regent, *incremental]
# * Integration: HDF5 + GASNet
# clang38_cxx98_debug_spy_gasnet_regent:
#   <<: [*linux_compute, *image_clang, *tests]
#   variables:
#     <<: [*clang38, *terra38, *debug, *cxx98_normal, *spy, *gasnet, *regent]
# * Different architectures
clang38_cxx98_32bit_debug_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx98_32bit_normal, *legion]
clang38_cxx11_32bit_release_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx11_32bit_normal, *legion]
# * External tests
clang38_cxx11_debug_external:
  <<: [*linux_compute, *image_clang, *external_tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *openmp, *hdf5]

# # macOS with Clang 3.5
# macos_clang38_cxx98_debug:
#   <<: [*macos, *tests]
#   variables:
#     <<: [*clang38, *debug, *cxx98_normal]

# Run minimal tests on other compilers.

# Linux with GCC 4.8, 5, 6, 7, 8
gcc48_cxx98_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc48, *terra38, *debug, *cxx98_normal, *legion]
gcc48_cxx98_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc48, *terra38, *debug, *cxx98_normal, *regent]
gcc5_cxx98_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc5, *terra38, *debug, *cxx98_normal, *legion]
gcc5_cxx98_debug_normal_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc5, *terra38, *debug, *cxx98_normal, *regent]
gcc6_cxx98_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc6, *terra38, *debug, *cxx98_normal, *legion]
gcc6_cxx98_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc6, *terra38, *debug, *cxx98_normal, *regent]
gcc6_cxx14_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc6, *terra38, *debug, *cxx14_normal, *checks, *legion]
gcc6_cxx14_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc6, *terra38, *debug, *cxx14_normal, *regent]
gcc7_cxx14_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc7, *terra38, *debug, *cxx14_normal, *checks, *legion]
gcc7_cxx14_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc7, *terra38, *debug, *cxx14_normal, *regent]
gcc7_cxx17_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc7, *terra38, *debug, *cxx17_normal, *checks, *legion]
gcc7_cxx17_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc7, *terra38, *debug, *cxx17_normal, *regent]
gcc8_cxx17_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc8, *terra38, *debug, *cxx17_normal, *checks, *legion]
gcc8_cxx17_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc8, *terra38, *debug, *cxx17_normal, *regent]

# GCC 8 with extra hardening
gcc8_cxx11_hardened_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc8, *terra38, *release, *cxx11_hardened, *legion]
gcc8_cxx11_hardened_regent:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc8, *terra38, *release, *cxx11_hardened, *regent, *parallel]

# Linux with Clang 3.5
clang35_cxx98_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*clang35, *terra35, *debug, *cxx98_normal, *legion]
# FIXME: Breaks on attempting to split vector-op
# clang35_cxx98_debug_regent:
#   <<: [*linux_compute, *image, *tests]
#   variables:
#     <<: [*clang35, *terra35, *debug, *cxx98_normal, *regent]
clang8_cxx17_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*clang8, *terra38, *debug, *cxx17_normal, *legion]

# Performance tests:
# n0004_gcc49_cxx98_release_perf:
#   <<: [*linux_n0004, *image, *perf_tests]
#   variables:
#     <<: [*gcc49, *terra38, *release, *cxx98_normal]

# Performance tests:
# n0004_gcc49_cxx98_release_perf:
#   <<: [*linux_n0004, *image, *perf_tests]
#   variables:
#     <<: [*gcc49, *terra38, *release, *cxx98_normal]

# CUDA tests:
n0003_gcc48_cxx98_release_legion_cuda:
  <<: [*n0003, *image, *tests]
  variables:
    <<: [*gcc48, *terra38, *release, *cxx98_normal, *cuda, *legion]
# n0003_gcc48_cxx98_release_regent_cuda:
#   <<: [*n0003, *image, *tests]
#   variables:
#     <<: [*gcc48, *terra38, *release, *cxx98_normal, *cuda, *regent]
p100_gcc7_cxx11_release_legion_cuda:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc7, *release, *cxx11_normal, *cuda_p100, *legion]
p100_clang7_cxx11_release_regent_cuda:
  <<: [*p100, *tests]
  variables:
    <<: [*clang7, *terra70, *release, *cxx11_normal, *cuda_p100, *regent]
p100_gcc7_cxx11_release_legion_cmake_cuda:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc7, *release, *cxx11_normal, *cuda_p100, *cmake, *legion, *ctest]
p100_clang7_cxx11_release_regent_cmake_cuda:
  <<: [*p100, *tests]
  variables:
    <<: [*clang7, *terra70, *release, *cxx11_normal, *cuda_p100, *cmake, *regent]

# Kokkos tests:
clang38_cxx11_debug_kokkos_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *kokkos, *cmake, *legion]
clang8_cxx11_debug_kokkos_openmp_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang8, *terra38, *debug, *cxx11_normal, *kokkos, *openmp, *cmake, *legion]
    REALM_DEFAULT_ARGS: "-ll:ocpu 1 -ll:onuma 0"
p100_clang7_cxx11_debug_kokkos_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*clang7, *debug, *cxx11_normal, *cuda_p100, *kokkos, *cmake, *legion]
p100_clang7_cxx11_debug_kokkos_cuda_openmp_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*clang7, *debug, *cxx11_normal, *cuda_p100, *kokkos, *openmp, *cmake, *legion, *ctest]
p100_gcc7_cxx11_debug_kokkos_cuda_openmp_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc7, *debug, *cxx11_normal, *cuda_p100, *kokkos, *openmp, *cmake, *legion, *ctest]

# Darwin Power9 tests:
darwin_power9_gcc8_cxx17_release_legion:
  <<: [*darwin_power9, *tests]
  variables:
    <<: [*gcc8, *debug, *cxx17_normal, *legion, *darwin_power9_scheduler]
darwin_power9_clang8_cxx17_debug_legion:
  <<: [*darwin_power9, *tests]
  variables:
    <<: [*clang8, *debug, *cxx17_normal, *legion, *darwin_power9_scheduler]
